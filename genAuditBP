#!/usr/bin/perl -w
#/u/regtest/software/perl-5.8/bin/perl -w
#C:\Perl\bin\perl -w

die "Usage: \n genAuditBP -spa EPPSA274 \n \
            -f SPA_SRC\n" if $#ARGV == -1;

use constant TRUE         =>1;
use constant FALSE        =>0;

use constant NOTCS        =>0;
use constant CSMODEL      =>1;
use constant INCLIENT     =>3;
use constant INSERVER     =>4;

my $src = undef;
my $bkdir;
my $bkpoint;
my $serverbkpoint;
my $clientbkpoint;

# get some environment
%args = @ARGV;
#my $spa = $ARGV[0];
my $spa = $args{'-spa'};

if($spa){
    my $mynode = $ENV{MYNODE};
    die "Please set your MYNODE\n" unless defined($mynode);

    # get the EPPSA sourcecode at $MYNODE, the default bkpoint location is 
    # also at $MYNODE/sn/sps/EPPSA*/breakpoints
    $src        = "$mynode/sn/sps/$spa/$spa.src";
    $bkdir = "$mynode/sn/sps/$spa/breakpoints";
    $bkpoint="$mynode/sn/sps/$spa/breakpoints/$spa.bkpoint";
    $serverbkpoint="$mynode/sn/sps/$spa/breakpoints/server.bkpoint";
    $clientbkpoint="$mynode/sn/sps/$spa/breakpoints/client.bkpoint";

    #make the breakpoints directory if not exist
    unless(-e $bkdir){
        `mkdir $bkdir`; 
    };

}


$spa = $args{'-f'};
if($spa){
    die "$spa does not exist\n" unless ( -s $spa);
    $src = $spa;
    $bkpoint = "EPPSA.bkpoint";
    $serverbkpoint = "server.bkpoint";
    $clientbkpoint = "client.bkpoint";
}

die "Input Parameter Error" unless defined($src);

# flags 
my $linenum = FALSE;
my $is_in_AuditComplete_event = FALSE;
my $is_in_CalAuditTime_event = FALSE;
my $is_exeable_line = TRUE;

#this flag to indicate if the source code is server-client model
# 0        not server-client model
# 1        server-client model
# 3        current in client side
# 4        current is server side

my $is_cs_model = FALSE;

#my $amastring = "print(\"TRACE:   Request_Generate_AMA_Record(Always_Generate_AMA_Flag=\" , Always_Generate_AMA_Flag , \",AMARG_Key=\" , AMARG_Key , \",AMARG_Check_Only_Flag=\" , AMARG_Check_Only_Flag , \",Generate_AMA_Record=\" , AMA_Record , \",Extended_Generate_AMA_Record=\" , Extended_AMA_Record , \")\" ) end at\n";
my $amastring = "print(\"TRACE:   Request_Generate_AMA_Record(Always_Generate_AMA_Flag=\" , Always_Generate_AMA_Flag , \",AMARG_Key=AMARG_Key_Type(AMA_Event_Label=\" , CLD_AMA_Event_Label, \",AMA_Event_Result=\",CLD_AMA_Event_Result, \"),AMARG_Check_Only_Flag=\" , AMARG_Check_Only_Flag , \",Generate_AMA_Record=\" , AMA_Record , \",Extended_Generate_AMA_Record=\" , Extended_AMA_Record , \")\" ) end at\n";

open(FILE, $src) || die "Can not open the file $src\n";
open(RESULT,">$bkpoint") || die "Can not open the file $bkpoint\n";
open(SERVER,">$serverbkpoint") || die "Can not open the file $serverbkpoint\n";
open(CLIENT,">$clientbkpoint") || die "Can not open the file $clientbkpoint\n";

#add the SRC info 
my $fileHead = <<EOF
#--------------------------------#
# BP For SRC: $src
# BP file generated by genAuditBP 
#--------------------------------#

EOF
  ;
print SERVER $fileHead;
print CLIENT $fileHead;


while($line=<FILE>){

   $linenum = $.;
   chop($line);
   next if($line=~/^\s*$/ || $line=~/^\s*#/);
   
   # check if this is a exeable line
   if($line=~/^dynamic\s*$/ || $line=~/^end\s+dynamic\s*/){
       if($&=~/end/){
           $is_exeable_line = TRUE;

       }else{
           $is_exeable_line = FALSE;
       }
   }
   next unless $is_exeable_line;

   # into the Audit_Complete Event
   if($line=~/^event\s+Audit_Complete\s*$/){

       $is_in_AuditComplete_event = TRUE;

   }
   # leave the Audit_Complete Event
   elsif($line=~/^end\s+event\s+Audit_Complete\s*$/){

       $is_in_AuditComplete_event = FALSE;

   }
   # check if this sourcecode is server-client model
   elsif($line=~/^client\s*$/ || $line=~/^server\s*/){

       if($&=~/client/){

           $is_cs_model = INCLIENT;

       }
       else{

           $is_cs_model = INSERVER;
       }

   }
   elsif($line=~/^end\s+client\s*$/ || $line=~/^end\s+server\s*$/){

       $is_cs_model = CSMODEL;
   }
   # step into the Calculate_Audit_Time Event
   elsif($line=~/^event\s+Calculate_Audit_Time\s*$/ || $line=~/^event\s+Calculate_Audit_Time_Continue\s*$/){

        $is_in_CalAuditTime_event = TRUE;
   }
   # leave the Calculate_Audit_Time Event
   elsif($line=~/^end\s+event\s+Calculate_Audit_Time\s*$/ || $line=~/^end\s+event\s+Calculate_Audit_Time_Continue\s*$/){

        $is_in_CalAuditTime_event = FALSE;
   }
   elsif($line=~/ama!commit\s*\(/){

        if($is_cs_model == FALSE){ print RESULT "at $linenum $amastring";} 

        elsif($is_cs_model == INCLIENT) {print CLIENT "at $linenum $amastring";}

        elsif($is_cs_model == INSERVER) {print SERVER "at $linenum $amastring";}

        else {print "Error occur at line $linenum, please contact tool owner\n"}
        #print "at line $linenum            $line\n";
   }
   elsif($is_in_AuditComplete_event && $line=~/^\s*if\s*\(?\s*(Glb_\w+_Audit_Inhibited)\s*\)?\s*$/){

        if($is_cs_model == FALSE){ print RESULT "at $linenum set $1 end at\nat $linenum reset SIM_Schedule_Event_tbl[] end at\n";} 

        elsif($is_cs_model == INCLIENT) {print CLIENT "at $linenum set $1 end at\nat $linenum reset SIM_Schedule_Event_tbl[] end at\n";}

        elsif($is_cs_model == INSERVER) {print SERVER "at $linenum set $1 end at\nat $linenum reset SIM_Schedule_Event_tbl[] end at\n";}

        else {print "Error occur at line $linenum, please contact tool owner\n"}
   }

   elsif($is_in_CalAuditTime_event && $line=~/^\s*set\s+Schedule_Next_Audit\.\S+/){

        while($line!~/^\s*set\s+Schedule_Next_Audit\.\S+\s*=\s*CLD_\w+_Next_Audit_Time/){

            $tmpstr=<FILE>;
               next if($tmpstr=~/^\s*$/ || $tmpstr=~/^\s*#/);
            chop($tmpstr);
            $line=$line.$tmpstr;
        }

        $line=~/^\s*set\s+Schedule_Next_Audit\.\S+\s*=\s*(CLD_\w+_Next_Audit_Time)/;
        #print "at line $linenum       $1\n";
        if($is_cs_model == FALSE){ print RESULT "at $linenum set $1 = 946656000 end at\n";} 

        #elsif($is_cs_model == INCLIENT) {print CLIENT "at $linenum set $1 = 946656000 end at\n";}
        elsif($is_cs_model == INCLIENT) {
            #print "Not generate breakpoint for $1 in client side!\n";
        }

        elsif($is_cs_model == INSERVER) {print SERVER "at $linenum set $1 = 946656000 end at\n";}

        else {print "Error occur at line $linenum, please contact tool owner\n"}
   }
}

print RESULT "detach\n";
print CLIENT "detach\n";
print SERVER "detach\n";

close(FILE);
close(RESULT);
close(SERVER);
close(CLIENT);

print "Success!\n";

if($is_cs_model){

    # remove the TID/Token Audit support

    `grep -v TID $serverbkpoint|grep -v Token > /tmp/abc.audit`;
    `mv  /tmp/abc.audit $serverbkpoint`;
    `grep -v TID $clientbkpoint |grep -v Token > /tmp/abc.audit`;
    `mv  /tmp/abc.audit $clientbkpoint`;

   print "The bk for server side is at $serverbkpoint\n";
   print "The bk for client side is at $clientbkpoint\n";
   #delete the bkpoint file
   unlink $bkpoint;
}
else {

    `grep -v TID $bkpoint |grep -v Token > /tmp/abc.audit`;
    `mv  /tmp/abc.audit $bkpoint`;
   print "The bk is at $bkpoint\n";
   #delete the serverbkpoint and clientbkpoint file
   unlink $serverbkpoint,$clientbkpoint;
}
